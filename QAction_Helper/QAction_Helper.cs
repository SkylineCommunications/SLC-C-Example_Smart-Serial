// <auto-generated>This is auto-generated code by DIS. Do not modify.</auto-generated>
using System.ComponentModel;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace Skyline.DataMiner.Scripting
{
public static class Parameter
{
	/// <summary>PID: 1000 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int indexdatapacket_1000 = 1000;
	/// <summary>PID: 1000 | Type: read</summary>
	public const int indexdatapacket = 1000;
	/// <summary>PID: 1001 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int datapacket_1001 = 1001;
	/// <summary>PID: 1001 | Type: read</summary>
	public const int datapacket = 1001;
	/// <summary>PID: 3000 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public const int responsestatus_3000 = 3000;
	/// <summary>PID: 3000 | Type: read</summary>
	public const int responsestatus = 3000;
	public class Write
	{
		/// <summary>PID: 2200 | Type: write</summary>
		[EditorBrowsable(EditorBrowsableState.Never)]
		public const int cleartable_2200 = 2200;
		/// <summary>PID: 2200 | Type: write</summary>
		public const int cleartable = 2200;
	}
	public class Mytable
	{
		/// <summary>PID: 2000</summary>
		public const int tablePid = 2000;
		/// <summary>IDX: 0</summary>
		public const int indexColumn = 0;
		/// <summary>PID: 2001</summary>
		public const int indexColumnPid = 2001;
		public class Pid
		{
			/// <summary>PID: 2001 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int myindex_2001 = 2001;
			/// <summary>PID: 2001 | Type: read</summary>
			public const int myindex = 2001;
			/// <summary>PID: 2002 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int mydata_2002 = 2002;
			/// <summary>PID: 2002 | Type: read</summary>
			public const int mydata = 2002;
			public class Write
			{
			}
		}
		public class Idx
		{
			/// <summary>IDX: 0 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int myindex_2001 = 0;
			/// <summary>IDX: 0 | Type: read</summary>
			public const int myindex = 0;
			/// <summary>IDX: 1 | Type: read</summary>
			[EditorBrowsable(EditorBrowsableState.Never)]
			public const int mydata_2002 = 1;
			/// <summary>IDX: 1 | Type: read</summary>
			public const int mydata = 1;
		}
	}
}
public class WriteParameters
{
	/// <summary>PID: 2200  | Type: write | DISCREETS: Clear Table = 0</summary>
	public System.Object Cleartable {get { return Protocol.GetParameter(2200); }set { Protocol.SetParameter(2200, value); }}
	public SLProtocolExt Protocol;
	public WriteParameters(SLProtocolExt protocol)
	{
		Protocol = protocol;
	}
}
public interface SLProtocolExt : SLProtocol
{
	/// <summary>PID: 2000</summary>
	MytableQActionTable mytable { get; set; }
	object Headerbytes_header { get; set; }
	object Trailerbytes_trailer { get; set; }
	object Afterresponsetrigger_dummy { get; set; }
	object Indexdatapacket_1000 { get; set; }
	object Indexdatapacket { get; set; }
	object Datapacket_1001 { get; set; }
	object Datapacket { get; set; }
	object Myindex_2001 { get; set; }
	object Myindex { get; set; }
	object Mydata_2002 { get; set; }
	object Mydata { get; set; }
	object Cleartable_2200 { get; set; }
	object Cleartable { get; set; }
	object Responsestatus_3000 { get; set; }
	object Responsestatus { get; set; }
	object Startbytes__fixed { get; set; }
	object Stopbytes__fixed { get; set; }
	WriteParameters Write { get; set; }
}
public class ConcreteSLProtocolExt : ConcreteSLProtocol, SLProtocolExt
{
	/// <summary>PID: 2000</summary>
	public MytableQActionTable mytable { get; set; }
	/// <summary>PID: 100  | Type: header</summary>
	public System.Object Headerbytes_header {get { return GetParameter(100); }set { SetParameter(100, value); }}
	/// <summary>PID: 200  | Type: trailer</summary>
	public System.Object Trailerbytes_trailer {get { return GetParameter(200); }set { SetParameter(200, value); }}
	/// <summary>PID: 300  | Type: dummy</summary>
	public System.Object Afterresponsetrigger_dummy {get { return GetParameter(300); }set { SetParameter(300, value); }}
	/// <summary>PID: 1000  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Indexdatapacket_1000 {get { return GetParameter(1000); }set { SetParameter(1000, value); }}
	/// <summary>PID: 1000  | Type: read</summary>
	public System.Object Indexdatapacket {get { return GetParameter(1000); }set { SetParameter(1000, value); }}
	/// <summary>PID: 1001  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Datapacket_1001 {get { return GetParameter(1001); }set { SetParameter(1001, value); }}
	/// <summary>PID: 1001  | Type: read</summary>
	public System.Object Datapacket {get { return GetParameter(1001); }set { SetParameter(1001, value); }}
	/// <summary>PID: 2001  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Myindex_2001 {get { return GetParameter(2001); }set { SetParameter(2001, value); }}
	/// <summary>PID: 2001  | Type: read</summary>
	public System.Object Myindex {get { return GetParameter(2001); }set { SetParameter(2001, value); }}
	/// <summary>PID: 2002  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Mydata_2002 {get { return GetParameter(2002); }set { SetParameter(2002, value); }}
	/// <summary>PID: 2002  | Type: read</summary>
	public System.Object Mydata {get { return GetParameter(2002); }set { SetParameter(2002, value); }}
	/// <summary>PID: 2200  | Type: write | DISCREETS: Clear Table = 0</summary>
	public System.Object Cleartable_2200 {get { return GetParameter(2200); }set { SetParameter(2200, value); }}
	/// <summary>PID: 2200  | Type: write | DISCREETS: Clear Table = 0</summary>
	public System.Object Cleartable {get { return Write.Cleartable; }set { Write.Cleartable = value; }}
	/// <summary>PID: 3000  | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Responsestatus_3000 {get { return GetParameter(3000); }set { SetParameter(3000, value); }}
	/// <summary>PID: 3000  | Type: read</summary>
	public System.Object Responsestatus {get { return GetParameter(3000); }set { SetParameter(3000, value); }}
	/// <summary>PID: 5100  | Type: fixed</summary>
	public System.Object Startbytes__fixed {get { return GetParameter(5100); }set { SetParameter(5100, value); }}
	/// <summary>PID: 5200  | Type: fixed</summary>
	public System.Object Stopbytes__fixed {get { return GetParameter(5200); }set { SetParameter(5200, value); }}
	public WriteParameters Write { get; set; }
	public ConcreteSLProtocolExt()
	{
		mytable = new MytableQActionTable(this, 2000, "mytable");
		Write = new WriteParameters(this);
	}
}
/// <summary>IDX: 0</summary>
public class MytableQActionTable : QActionTable, IEnumerable<MytableQActionRow>
{
	public MytableQActionTable(SLProtocol protocol, int tableId, string tableName) : base(protocol, tableId, tableName) { }
	IEnumerator IEnumerable.GetEnumerator() { return (IEnumerator) GetEnumerator(); }
	public IEnumerator<MytableQActionRow> GetEnumerator() { return new QActionTableEnumerator<MytableQActionRow>(this); }
}
/// <summary>IDX: 0</summary>
public class MytableQActionRow : QActionTableRow
{
	/// <summary>PID: 2001 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Myindex_2001 { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 2001 | Type: read</summary>
	public System.Object Myindex { get { if (base.Columns.ContainsKey(0)) { return base.Columns[0]; } else { return null; } } set { if (base.Columns.ContainsKey(0)) { base.Columns[0] = value; } else { base.Columns.Add(0, value); } } }
	/// <summary>PID: 2002 | Type: read</summary>
	[EditorBrowsable(EditorBrowsableState.Never)]
	public System.Object Mydata_2002 { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	/// <summary>PID: 2002 | Type: read</summary>
	public System.Object Mydata { get { if (base.Columns.ContainsKey(1)) { return base.Columns[1]; } else { return null; } } set { if (base.Columns.ContainsKey(1)) { base.Columns[1] = value; } else { base.Columns.Add(1, value); } } }
	public MytableQActionRow() : base(0, 2) { }
	public MytableQActionRow(System.Object[] oRow) : base(0, 2, oRow) { }
	public static implicit operator MytableQActionRow(System.Object[] source) { return new MytableQActionRow(source); }
	public static implicit operator System.Object[](MytableQActionRow source) { return source.ToObjectArray(); }
}
}
